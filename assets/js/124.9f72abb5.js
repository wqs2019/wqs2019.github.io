(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{440:function(t,a,s){"use strict";s.r(a);var r=s(3),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"webpack面试常考点-深入浅出webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack面试常考点-深入浅出webpack"}},[t._v("#")]),t._v(" webpack面试常考点——深入浅出webpack")]),t._v(" "),a("blockquote",[a("p",[t._v("梅须逊雪三分白，雪却输梅一段香")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/common/1.gif",alt:" "}})]),t._v(" "),a("h2",{attrs:{id:"_01-前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01-前言"}},[t._v("#")]),t._v(" 01 前言")]),t._v(" "),a("p",[t._v("大家可以想一下，假如你在面试当中最不想遇到的是什么？其实无非就是问到你不会的知识点，很多人可能会存着侥幸的心理不想面对那些看不懂的知识。所以我就想奉劝大家一句，还是好好恶补一下吧。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/tech/ffcf7d/2.png",alt:" "}})]),t._v(" "),a("p",[t._v("前端现在越来越向着工程化的方向发展，我们可以做的事情越来越多了，而且功能都很丰富。前端框架的发展就是因为效率的问题，搭建一个通用脚手架就可以为以后的开发省下不少的时间。")]),t._v(" "),a("p",[t._v("前端的构建工具有很多种，下面我就总结一下前端打包工具webpack到底是什么？有什么作用。还有顺便总结一下面试通常会问些什么问题。")]),t._v(" "),a("h2",{attrs:{id:"_02-webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-webpack"}},[t._v("#")]),t._v(" 02 webpack")]),t._v(" "),a("p",[t._v("webpack是一个开源的前端打包工具，提供了前端开发缺乏的模块化开发方式，将各种静态资源视为模块，并从它生成优化过的代码。可以从配置文件里面配置资源入口、匹配规则等多种功能。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/tech/ffcf7d/1.png",alt:" "}})]),t._v(" "),a("h5",{attrs:{id:"webpack的构建作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的构建作用"}},[t._v("#")]),t._v(" "),a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("webpack的构建作用")])],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("代码转换")]),t._v("：将es6转换成es5代码，把.scss文件转化成.css文件")]),t._v(" "),a("li",[a("strong",[t._v("文件优化")]),t._v("：可以合并图片，压缩代码")]),t._v(" "),a("li",[a("strong",[t._v("代码分割")]),t._v("：把每个页面的公共代码提取，异步加载首屏不需要的部分")]),t._v(" "),a("li",[a("strong",[t._v("模块合并")]),t._v("：构建过程可以合并相同类型的文件")]),t._v(" "),a("li",[a("strong",[t._v("自动刷新")]),t._v("：监听代码修改，自动刷新浏览器内容")]),t._v(" "),a("li",[a("strong",[t._v("代码校验")]),t._v("：校验代码是否符合规范")]),t._v(" "),a("li",[a("strong",[t._v("自动发布")]),t._v("：代码更新后自动构建，上线发布并提交给系统")])]),t._v(" "),a("h5",{attrs:{id:"webpack的打包原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的打包原理"}},[t._v("#")]),t._v(" "),a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("webpack的打包原理")])],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("初始化参数")]),t._v("：从配置文件和shell文件语句中读取与合并，得出最终的配置参数。")]),t._v(" "),a("li",[a("strong",[t._v("开始编译")]),t._v("：根据参数初始化Compiler对象，加载所有配置的插件")]),t._v(" "),a("li",[a("strong",[t._v("确定入口")]),t._v("：根据entry确定所有入口文件")]),t._v(" "),a("li",[a("strong",[t._v("模块编译")]),t._v("：从入口文件开始，调用loader对模块进行翻译，递归找出所有依赖文件")]),t._v(" "),a("li",[a("strong",[t._v("完成编译")]),t._v("：使用loader翻译完之后，得到模块之间的关系以及模块内容")]),t._v(" "),a("li",[a("strong",[t._v("输出资源")]),t._v("：根据入口和模块关系，组装成包含多个模块的Chunk，将每个Chunk转换成一个单独文件加入输出列表")])]),t._v(" "),a("h5",{attrs:{id:"webpack核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack核心概念"}},[t._v("#")]),t._v(" "),a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("webpack核心概念")])],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Entry")]),t._v("：入口，webpack的构建入口从这里开始")]),t._v(" "),a("li",[a("strong",[t._v("Module")]),t._v("：模块，webpack处理模块的规则，在webpack里一切文件都是模块，webpack会从配置的Entry开始递归找到所有依赖的模块")]),t._v(" "),a("li",[a("strong",[t._v("Loader")]),t._v("：模块翻译器，用于把一些新的语法文件，如ES6、.scss文件转换成ES5和.css文件等可让浏览器识别的。")]),t._v(" "),a("li",[a("strong",[t._v("Resolve")]),t._v("：配置webpack的寻找模块规则，用于提高效率")]),t._v(" "),a("li",[a("strong",[t._v("Plugin")]),t._v("：插件，webpack在构建的过程中会广播对应的事件，插件的作用就是可以监听事件，然后执行相应的操作")]),t._v(" "),a("li",[a("strong",[t._v("Output")]),t._v("：输出结果，webpack在经过一系列的处理最终得到的代码结果")]),t._v(" "),a("li",[a("strong",[t._v("Chunk")]),t._v("：代码块，一个Chunk由多个模块组成，用于代码合并与分割")])]),t._v(" "),a("h5",{attrs:{id:"webpack的loader和plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的loader和plugin"}},[t._v("#")]),t._v(" "),a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("webpack的loader和plugin")])],1)]),t._v(" "),a("p",[t._v("对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，用原模块的内容按照loader翻译成另外的内容。比如将A.scss转换为A.css，单纯的文件转换过程。")]),t._v(" "),a("p",[t._v("plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后。webpack在整个构建过程中特定时机会广播出对应的事件，plugin就可以监听这些事件并执行相应的过程，它并不直接操作文件，而是基于事件机制工作。")]),t._v(" "),a("h2",{attrs:{id:"_03-webpack优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-webpack优化"}},[t._v("#")]),t._v(" 03 webpack优化")]),t._v(" "),a("p",[a("img",{attrs:{src:"/tech/ffcf7d/3.png",alt:" "}})]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("1. 缩小文件范围")])],1)]),t._v(" "),a("ul",[a("li",[a("p",[t._v("优化loader，尽可能少的文件被loader处理翻译。")]),t._v(" "),a("p",[t._v("（1）优化正则匹配")]),t._v(" "),a("p",[t._v("（2）开启cacheDirectory缓存")]),t._v(" "),a("p",[t._v("（3）配置include、exclude")])]),t._v(" "),a("li",[a("p",[t._v("优化resolve.modules，指定路径减少查找范围")])]),t._v(" "),a("li",[a("p",[t._v("配置resolve.alias，配置别名")])]),t._v(" "),a("li",[a("p",[t._v("配置resolve.extensions，正确填写文件后缀名，减少查找")])]),t._v(" "),a("li",[a("p",[t._v("配置resolve.noParse，忽略部分没采用模块化的文件处理")])])]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("2. 减少冗余代码")])],1)]),t._v(" "),a("p",[t._v("babel-plugin-transform-runtime，可以减少冗余代码，减少编译后的文件大小")]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("3. 使用HappyPack")])],1)]),t._v(" "),a("p",[t._v("运行在node之上的webpack是单线程模型，HappyPack可以分解任务给多个子进程并发执行，处理完之后再发送给主线程")]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("4. 使用ParalleUglifyPlugin")])],1)]),t._v(" "),a("p",[t._v("原来js代码输出会使用Uglify逐个压缩，但是ParalleUglifyPlugin会把多个文件压缩工作分配给多个子进程完成，加快压缩时间")]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("5. 使用自动刷新")])],1)]),t._v(" "),a("p",[t._v("当你修改本地代码之后，webpack会监听改变并自动构建完成输出可以运行代码，然后控制浏览器刷新")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("devServer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("watchOptions")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不监听的文件或文件夹，支持正则匹配")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ignored")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("node_modules")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听到变化后等300ms再去执行动作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("aggregateTimeout")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认每秒询问1000次")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("poll")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("6. 开启模块热替换")])],1)]),t._v(" "),a("p",[t._v("配置devServer中的热模块替换，可在不刷新浏览器情况下实时预览。原理是源码变化后使用重新编译的模块替换旧模块。")]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("7. 提取公共代码")])],1)]),t._v(" "),a("p",[t._v("将多个页面的公共代码抽取出来，形成单独的文件，避免多次加载浪费用户流量。可使用CommonsChunkPlugin插件来解决。")]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("8. 按需加载代码")])],1)]),t._v(" "),a("p",[t._v("工程化构建项目的时候会引入很多不需要的文件，比如引入Ant Design可以按需引入，提高首屏的现实速度。")]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("9. 优化SourceMap")])],1)]),t._v(" "),a("p",[t._v("上线代码会进行压缩，缺点就是开发人员难以定位错误和检查bug。SourceMap可以进行定位。")]),t._v(" "),a("p",[a("strong",[a("font",{attrs:{color:"#FF7F50"}},[t._v("10. 构建结果图形化")])],1)]),t._v(" "),a("p",[t._v("可以使用webpack-bundle-analyzer进行可视化构建结果，分析项目的构建还可以有哪些优化问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/tech/ffcf7d/4.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_04-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_04-小结"}},[t._v("#")]),t._v(" 04 小结")]),t._v(" "),a("p",[t._v("webpack是一个构建打包工具，现在几乎前端的框架都可以使用它进行项目的打包和优化，里面的可配置性非常高，可以做的事情非常多。现在社区的生态也很活跃，越来越多的插件被开发者开发出来，值得我们好好去学习。")]),t._v(" "),a("p",[a("font",{attrs:{color:"#32CD32"}},[t._v("参考文章")])],1),t._v(" "),a("ul",[a("li",[t._v("Webpack再深入在总结")]),t._v(" "),a("li",[t._v("Vue项目Webpack优化实践，构建效率提高50%")]),t._v(" "),a("li",[t._v("《深入浅出Webpack》")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/common/2.gif",alt:""}})])])}),[],!1,null,null,null);a.default=e.exports}}]);